; Test program
include "inc/hardware.inc"

; Memory definition
sprite_y    equ _OAMRAM
sprite_x    equ _OAMRAM + 1
sprite_num  equ _OAMRAM + 2
sprite_att  equ _OAMRAM + 3

; Control variables
movement_x  equ _RAM
movement_y  equ _RAM + 1

section "start", rom0[$0100]
  nop
  jp fn_main

  ; ROM Header
  ROM_HEADER CART_ROM_ONLY, ROM_32K, RAM_NONE

  ; Main program
fn_main:
  nop
  di              ; Disable interrupts
  ld sp, $FFFF    ; Set stack to the end of RAM
  ld a, %11100100 ; Load color palette
                  ; Darkest, 11, 10, 01, 00 Lightest
  ld [rBGP], a    ; Load pallete into palette register

  ld a, 0
  ld [rSCX], a    ; Set scroll registers (X/Y) to 0
  ld [rSCY], a

  call fn_switch_screen_off ; Clear LCD before writing to screen

  ; Create lables
  block
    alias de, VRAM_pointer
    alias hl, tile_pointer
    alias b, tile_counter

    ; Load tile data to memory
    ld tile_pointer, tl_face  ; load tile start address into hl
    ld VRAM_pointer, _VRAM    ; load Video RAM address into de
    ld tile_counter, tl_bg_length - tl_white_length ; Number of tiles to load

  .loop_copy_tiles:
    ld a, [tile_pointer]      ; load tile from tl_face into a
    ld [VRAM_pointer], a      ; load a into VRAM
    dec tile_counter          ; b = b - 1
    jr z, .loop_copy_tiles_end
    inc tile_pointer          ; point to next tile
    inc VRAM_pointer          ; point to next address in VRAM
    jr .loop_copy_tiles
  end

.loop_copy_tiles_end:

  alias hl, tile_pointer
  alias b, line_counter
  alias c, column_counter
  ld tile_pointer, _SCRN0   ; set tile 0 to background tile 0
  ; Load alternate tiles to the background
  ; Initialize line counter
  ld line_counter, $00
.loop_line_counter:
  ; Initialize column counter
  ld column_counter, $00
.loop_column_counter:

  ; load tiles
  bit %000, line_counter
  jr z, .loop_load_even_line_tiles
.loop_load_odd_line_tiles
  bit %000, column_counter
  jr z, .loop_load_white_1
.loop_load_black_1
  ld [tile_pointer], $02
  jr .loop_write_tile_to_map
.loop_load_white_1
  ld [tile_pointer], $03
  jr .loop_write_tile_to_map
.loop_load_even_line_tiles
  bit %000, column_counter
  jr nz, .loop_load_white_2
.loop_load_black_2
  ld [tile_pointer], $02
  jr .loop_write_tile_to_map
.loop_load_white_2
  ld [tile_pointer], $03
.loop_write_tile_to_map
  inc tile_pointer
  ; loop logic
  inc column_counter
  ld a, column_counter
  cp $20
  jr nz, .loop_column_counter

  ; clear column and move to the next line
  inc line_counter
  ld a, line_counter
  cp $20
  jr nz, .loop_line_counter

  ; Configure Sprites
  alias hl, sprite_memory_pointer
  alias c, sprite_counter
  ld sprite_memory_pointer, _OAMRAM
  ld sprite_counter, 40

.loop_clear_oamram:
  ld a, $00
  ld [sprite_memory_pointer], a ; Y
  inc sprite_memory_pointer
  ld [sprite_memory_pointer], a ; X
  inc sprite_memory_pointer
  ld [sprite_memory_pointer], a ; Tile
  inc sprite_memory_pointer
  ld [sprite_memory_pointer], a ; attribute
  inc sprite_memory_pointer
  dec sprite_counter
  jr nz, .loop_clear_oamram

  ; Initialize first sprite
  ld a, 30
  ld [sprite_y], a
  ld a, 30
  ld [sprite_x], a
  ld a, 0
  ld [sprite_num], a ; Tile used for the sprite
  ld a, 0
  ld [sprite_att], a
  ld a, 1
  ld [movement_x], a
  ld a, 1
  ld [movement_y], a

.loop_set_tiles_end:
  ; Configure and activate display
  ld a, LCDCF_ON | LCDCF_BG8000 | LCDCF_BG9800 | LCDCF_BGON | LCDCF_OBJ8 | LCDCF_OBJON
  ld [rLCDC], a

  block
    alias c, outer_counter
    ld outer_counter, $00
loop_main_loop:
    ; call background update logic
    call fn_main_loop_sprite_update
    call fn_main_loop_bg_update
    jr loop_main_loop
  end

fn_main_loop_sprite_update:
  block
    .wait
      ld a, [rLY]
      cp 145
      jr nz, .wait
      ld a, [movement_x]
      ld hl, sprite_x
      add a, [hl]
      ld [hl], a
      cp 160
      jr z, .dec_x
      cp 8
      jr z, .inc_x
      jr .end_x
    .inc_x
      ld a, 1
      ld [movement_x], a
      jr .end_x
    .dec_x
      ld a, -1
      ld [movement_x], a
    .end_x
      ld a, [movement_y]
      ld hl, sprite_y
      add a, [hl]
      ld [hl], a
      cp 152
      jr z, .dec_y
      cp 16
      jr z, .inc_y
      jr .end_y
    .inc_y
      ld a, 1
      ld [movement_y], a
      jr .end_y
    .dec_y
      ld a, -1
      ld [movement_y], a
    .end_y
      ret
  end


fn_main_loop_bg_update:
block
  alias c, outer_counter
  alias d, x_movement
  alias e, y_movement
.wait_for_vblank:
  ld a, [rLY]     ; Line Register (Y)
  cp 145          ; Check if current line is 145
  jr nz, .wait_for_vblank
  inc outer_counter
  ld a, outer_counter
  cp $30
  ret nz
.cnd_move_bc:
  ld outer_counter, $00
  inc x_movement
  ld a, x_movement
  ld [rSCX], a    ; Set scroll registers (X/Y) to 0
  dec y_movement
  ld a, y_movement
  ld [rSCY], a
  ret
end


fn_switch_screen_off:
  ld a, [rLCDC]   ; LCD Control register
  rlca            ; Set highest bit of LCDC into the carry flag
  ret nc          ; Return if display is already off

  ; Wait for VBlank otherwise (to properly switch display off)
.wait_for_vblank
  ld a, [rLY]     ; Line Register (Y)
  cp 145          ; Check if current line is 145
  jr nz, .wait_for_vblank

  ; VBlank confirmed, switch off LCD
  ld a, [rLCDC]   ; load LCD control register content into a
  res 7, a        ; set bit 7 as zero (switch LCD off)
  ld [rLCDC], a
  ret

; Tile bytes
tl_face:
  db $7C, $7C, $82, $FE, $82, $D6, $82, $D6
  db $82, $FE, $82, $BA, $82, $C6, $7C, $7C
tl_face_length:

tl_bg:
  db $AA, $00, $44, $00, $AA, $00, $11, $00
  db $AA, $00, $44, $00, $AA, $00, $11, $00
tl_bg_length:

tl_black:
  db $55, $AA, $55, $AA, $55, $AA, $55, $AA
  db $55, $AA, $55, $AA, $55, $AA, $55, $AA
tl_black_length:

tl_white:
  db $00, $00, $00, $00, $00, $00, $00, $00
  db $00, $00, $00, $00, $00, $00, $00, $00
tl_white_length: