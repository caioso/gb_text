; Test program
include "inc/hardware.inc"
include "main.z80"

; Section definition
section "start", rom0[$0100]
nop
jp gameboy_game ; Jump to program entry

; ROM Header
ROM_HEADER CART_ROM_ONLY, ROM_32K, RAM_NONE

; Type definition
;blk struct
;  name sprite
;  def position_x
;  def position_y
;  def tile
;  def attributes
;end ; struct

; Main program
; blk prg
    name gameboy_game

    ; Define als
;     als c, counter
;     als b, value
    ld c, $00

;     blk
;         als hl, vram_value
;         als a, counter
;         als d, value
;         als e, index
        ; ...
        ld [hl], $01
        add a, d
;     end ; cnd

;     als c, index
;     blk lp
        ; ...
;         als c, vram_value
        ld a, c
        inc c
;         blk if ; index, z
            cnd c eq 100
            break
;         end
;     end ; lp

    inc index_2
;     als hl, pointer
    ld a, [hl]
    ; ...

    ; Call function
    call wait_for_vblank # extern function

    ld c, $03
    call fn__is_bigger_than_16 # local function

; end ; prg

; Functions
fn__my_function: ; blk fn
;     name my_function

;     als c, input_1
;     als d, input_2
;     als l, output_1

    ld a, c
    ld b, c
    add a, b
    sla a
    ld l, a

    ret
; end

; Checks wether input argument is between 10 and 20
; INPUT[c]: number to be checked
; OUTPUT[d]: $01 if less than 16
;            $02 otherwise
fn__is_bigger_than_16: ; blk fn
;     name is_bigger_than_16

;     als c, input
;     als d, return
;     als b, counter
    ld c, $00
    ld d, $00

    ; Condition
;     blk if
        cnd c    eq $10     and
        cnd b  ne $20     or
        cnd a        lt $00     and
        cnd b        le $33     or
        cnd [MEM]    gt c       and
        cnd $33      ge [MEM]

        ld d, $01

        ; Inner Codition
;         blk if
            cnd c    == $10 &&
            cnd b  != $20 ||
            cnd a        <  $00 &&
            cnd b        <= $33 ||
            cnd [MEM]    > c   &&
            cnd $33      >= [MEM]

            ld d, $03
;         end

    else
        ld d, $02
;     end

    ret
; end
