; Test program
include "inc/hardware.inc"

; Section definition
section "start", rom0[$0100]
nop
jp gameboy_game ; Jump to program entry

; ROM Header
ROM_HEADER CART_ROM_ONLY, ROM_32K, RAM_NONE

; Type definition
;blk struct
;  name sprite
;  def position_x
;  def position_y
;  def tile
;  def attributes
;end ; struct

; Main program
blk prg
    name gameboy_game

    ; Define als
    als c, counter
    als b, value
    ld counter, $00

    blk
        als hl, vram_value
        als a, counter
        als d, value
        als e, index
        ; ...
        ld [vram_value], $01
        add counter, value
    end ; cnd

    als b, limits
    ld limits, $100
    blk lp
        ; Count within loop
        als c, counter
        blk if
            cnd limits eq counter
            break
        end ; if

        inc counter
    end ; lp

    inc index_2
    als hl, pointer
    ld a, [pointer]
    ; ...

    ; Call function
    call wait_for_vblank ; extern function

    ld c, $03
    call is_bigger_than_16 ; local function

end ; prg

; Functions
blk fn
    name my_function

    als c, input_1
    als d, input_2
    als l, output_1

    ld a, input_1
    ld b, input_1
    add a, b
    sla a
    ld output_1, a

    ret
end

; Checks wether input argument is between 10 and 20
; INPUT[c]: number to be checked
; OUTPUT[d]: $01 if less than 16
;            $02 otherwise
blk fn
    name is_bigger_than_16

    als c, input
    als d, return
    als b, counter
    ld input, $00
    ld return, $00

    ; Condition
    ; blk if
    ;     cnd input    eq $10     and
    ;     cnd counter  ne $20     or
    ;     cnd a        lt $00     and
    ;     cnd b        le $33     or
    ;     cnd [MEM]    gt c       and
    ;     cnd $33      ge [MEM]

    ;     ld return, $01

    ;     ; Inner Codition
    ;     blk if
    ;         cnd input    == $10 &&
    ;         cnd counter  != $20 ||
    ;         cnd a        <  $00 &&
    ;         cnd b        <= $33 ||
    ;         cnd [MEM]    > c   &&
    ;         cnd $33      >= [MEM]

    ;         ld return, $03
    ;     end

    ; else
    ;     ld return, $02
    ; end

    ret
end
